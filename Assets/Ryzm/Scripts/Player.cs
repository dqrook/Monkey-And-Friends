//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Ryzm/Scripts/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Ryzm
{
    public partial class @Player : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Player()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""PlayerMain"",
            ""id"": ""12b7cc40-589c-4e45-8799-37ae6fdbd23a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""aa156a7c-f80d-4e74-b81a-a8923fd65b9a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""65895c68-7fe9-4336-912e-28e4cb0d8dfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""51bbc4d7-79e2-484e-bee8-5789a6955046"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""7dd19565-775c-4101-bea0-433cfee2a642"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6b0a1f9f-4519-475d-acc9-36d6806f1925"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""c2169680-101c-46b7-8b69-d94eccd59847"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e7576dd7-8bc1-4442-bd57-08a5f479f61d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d910e234-4f56-41cc-bd01-fa20ada9a806"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3392f95e-9cbc-4b81-867d-5b650e7742a8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f47500a6-4d74-48e2-9bb6-f27acf3242c1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4db0fa4d-2092-4db7-b80e-74325238a452"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d65f3952-1005-41ba-9ef2-d06edc16ffae"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ea0cb6a-e821-4d5f-bdc6-4f3ec18cc66d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""859e1541-2ea9-4b01-b409-9dae6ae3f7a3"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7904e4f3-85a5-4259-b315-9b9f524abc22"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""1f08024a-fbda-4a19-8276-e51b777b2c54"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4341cfdd-ed63-427a-b5c8-2af41e2d21d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press""
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""Value"",
                    ""id"": ""ddb1f883-6fda-41f0-92ba-db77b06d93be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0e6b232-183a-41b7-8951-f233c0ea1680"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc3d832f-b5ae-4e8e-8647-9984d87383ad"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Endless"",
            ""id"": ""63a7d170-caaa-4f97-9ad6-0fb40826a09b"",
            ""actions"": [
                {
                    ""name"": ""ShiftLeft"",
                    ""type"": ""Button"",
                    ""id"": ""6a18f256-7ec9-4900-a7ea-21f179a4aa58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""ShiftRight"",
                    ""type"": ""Button"",
                    ""id"": ""30f600ab-ddae-4c1a-8e57-fde7096f445c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""09009cf5-8e75-4c5f-9bb9-67a75eb6a860"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5ab171c-2e61-46d6-ba0f-2789d3f1923d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2113932e-8e17-4ba3-9a14-492aeac083f2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51f8c1ef-3778-4e59-84d6-c26c4e3c8eaf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32486e87-ad43-47b0-b95a-61b90564520b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""674006e0-5a85-4ba9-a5cb-8a7143ba8b7f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""148877ee-077c-41e8-a97e-5fa7f6a4ee0d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerMain
            m_PlayerMain = asset.FindActionMap("PlayerMain", throwIfNotFound: true);
            m_PlayerMain_Move = m_PlayerMain.FindAction("Move", throwIfNotFound: true);
            m_PlayerMain_Jump = m_PlayerMain.FindAction("Jump", throwIfNotFound: true);
            m_PlayerMain_Look = m_PlayerMain.FindAction("Look", throwIfNotFound: true);
            m_PlayerMain_Attack = m_PlayerMain.FindAction("Attack", throwIfNotFound: true);
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_PrimaryContact = m_Touch.FindAction("PrimaryContact", throwIfNotFound: true);
            m_Touch_PrimaryPosition = m_Touch.FindAction("PrimaryPosition", throwIfNotFound: true);
            // Endless
            m_Endless = asset.FindActionMap("Endless", throwIfNotFound: true);
            m_Endless_ShiftLeft = m_Endless.FindAction("ShiftLeft", throwIfNotFound: true);
            m_Endless_ShiftRight = m_Endless.FindAction("ShiftRight", throwIfNotFound: true);
            m_Endless_Slide = m_Endless.FindAction("Slide", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMain
        private readonly InputActionMap m_PlayerMain;
        private IPlayerMainActions m_PlayerMainActionsCallbackInterface;
        private readonly InputAction m_PlayerMain_Move;
        private readonly InputAction m_PlayerMain_Jump;
        private readonly InputAction m_PlayerMain_Look;
        private readonly InputAction m_PlayerMain_Attack;
        public struct PlayerMainActions
        {
            private @Player m_Wrapper;
            public PlayerMainActions(@Player wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerMain_Move;
            public InputAction @Jump => m_Wrapper.m_PlayerMain_Jump;
            public InputAction @Look => m_Wrapper.m_PlayerMain_Look;
            public InputAction @Attack => m_Wrapper.m_PlayerMain_Attack;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMain; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMainActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerMainActions instance)
            {
                if (m_Wrapper.m_PlayerMainActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                    @Jump.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnJump;
                    @Look.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnLook;
                    @Attack.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnAttack;
                }
                m_Wrapper.m_PlayerMainActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                }
            }
        }
        public PlayerMainActions @PlayerMain => new PlayerMainActions(this);

        // Touch
        private readonly InputActionMap m_Touch;
        private ITouchActions m_TouchActionsCallbackInterface;
        private readonly InputAction m_Touch_PrimaryContact;
        private readonly InputAction m_Touch_PrimaryPosition;
        public struct TouchActions
        {
            private @Player m_Wrapper;
            public TouchActions(@Player wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryContact => m_Wrapper.m_Touch_PrimaryContact;
            public InputAction @PrimaryPosition => m_Wrapper.m_Touch_PrimaryPosition;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void SetCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterface != null)
                {
                    @PrimaryContact.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryContact.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryContact.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryPosition;
                    @PrimaryPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryPosition;
                    @PrimaryPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryPosition;
                }
                m_Wrapper.m_TouchActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PrimaryContact.started += instance.OnPrimaryContact;
                    @PrimaryContact.performed += instance.OnPrimaryContact;
                    @PrimaryContact.canceled += instance.OnPrimaryContact;
                    @PrimaryPosition.started += instance.OnPrimaryPosition;
                    @PrimaryPosition.performed += instance.OnPrimaryPosition;
                    @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                }
            }
        }
        public TouchActions @Touch => new TouchActions(this);

        // Endless
        private readonly InputActionMap m_Endless;
        private IEndlessActions m_EndlessActionsCallbackInterface;
        private readonly InputAction m_Endless_ShiftLeft;
        private readonly InputAction m_Endless_ShiftRight;
        private readonly InputAction m_Endless_Slide;
        public struct EndlessActions
        {
            private @Player m_Wrapper;
            public EndlessActions(@Player wrapper) { m_Wrapper = wrapper; }
            public InputAction @ShiftLeft => m_Wrapper.m_Endless_ShiftLeft;
            public InputAction @ShiftRight => m_Wrapper.m_Endless_ShiftRight;
            public InputAction @Slide => m_Wrapper.m_Endless_Slide;
            public InputActionMap Get() { return m_Wrapper.m_Endless; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EndlessActions set) { return set.Get(); }
            public void SetCallbacks(IEndlessActions instance)
            {
                if (m_Wrapper.m_EndlessActionsCallbackInterface != null)
                {
                    @ShiftLeft.started -= m_Wrapper.m_EndlessActionsCallbackInterface.OnShiftLeft;
                    @ShiftLeft.performed -= m_Wrapper.m_EndlessActionsCallbackInterface.OnShiftLeft;
                    @ShiftLeft.canceled -= m_Wrapper.m_EndlessActionsCallbackInterface.OnShiftLeft;
                    @ShiftRight.started -= m_Wrapper.m_EndlessActionsCallbackInterface.OnShiftRight;
                    @ShiftRight.performed -= m_Wrapper.m_EndlessActionsCallbackInterface.OnShiftRight;
                    @ShiftRight.canceled -= m_Wrapper.m_EndlessActionsCallbackInterface.OnShiftRight;
                    @Slide.started -= m_Wrapper.m_EndlessActionsCallbackInterface.OnSlide;
                    @Slide.performed -= m_Wrapper.m_EndlessActionsCallbackInterface.OnSlide;
                    @Slide.canceled -= m_Wrapper.m_EndlessActionsCallbackInterface.OnSlide;
                }
                m_Wrapper.m_EndlessActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ShiftLeft.started += instance.OnShiftLeft;
                    @ShiftLeft.performed += instance.OnShiftLeft;
                    @ShiftLeft.canceled += instance.OnShiftLeft;
                    @ShiftRight.started += instance.OnShiftRight;
                    @ShiftRight.performed += instance.OnShiftRight;
                    @ShiftRight.canceled += instance.OnShiftRight;
                    @Slide.started += instance.OnSlide;
                    @Slide.performed += instance.OnSlide;
                    @Slide.canceled += instance.OnSlide;
                }
            }
        }
        public EndlessActions @Endless => new EndlessActions(this);
        public interface IPlayerMainActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
        }
        public interface ITouchActions
        {
            void OnPrimaryContact(InputAction.CallbackContext context);
            void OnPrimaryPosition(InputAction.CallbackContext context);
        }
        public interface IEndlessActions
        {
            void OnShiftLeft(InputAction.CallbackContext context);
            void OnShiftRight(InputAction.CallbackContext context);
            void OnSlide(InputAction.CallbackContext context);
        }
    }
}
